// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230603094247_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PurchaserId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchaser_id");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("PurchaserId")
                        .HasDatabaseName("ix_bookings_purchaser_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Bookings.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("FlightControlId")
                        .HasColumnType("uuid")
                        .HasColumnName("flight_control_id");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_tickets_booking_id");

                    b.HasIndex("FlightControlId")
                        .HasDatabaseName("ix_tickets_flight_control_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("Domain.FlightControl.FlightControl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Gate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("gate");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_flight_controls");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_flight_controls_number");

                    b.ToTable("flight_controls", (string)null);
                });

            modelBuilder.Entity("Domain.Purchasers.Purchaser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_purchasers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_purchasers_email");

                    b.ToTable("purchasers", (string)null);
                });

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.HasOne("Domain.Purchasers.Purchaser", null)
                        .WithMany()
                        .HasForeignKey("PurchaserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_purchasers_purchaser_temp_id");
                });

            modelBuilder.Entity("Domain.Bookings.Ticket", b =>
                {
                    b.HasOne("Domain.Bookings.Booking", null)
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_bookings_booking_temp_id");

                    b.HasOne("Domain.FlightControl.FlightControl", null)
                        .WithMany()
                        .HasForeignKey("FlightControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_flight_controls_flight_control_id1");

                    b.OwnsOne("Domain.Bookings.Seat", "Seat", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("seat_number");

                            b1.Property<bool>("Occupied")
                                .HasColumnType("boolean")
                                .HasColumnName("seat_occupied");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.OwnsOne("Domain.FlightControl.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId")
                                .HasConstraintName("fk_tickets_tickets_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Seat")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.FlightControl.FlightControl", b =>
                {
                    b.OwnsOne("Domain.FlightControl.Airport", "Arrival", b1 =>
                        {
                            b1.Property<Guid>("FlightControlId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("arrival_code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("arrival_name");

                            b1.HasKey("FlightControlId");

                            b1.ToTable("flight_controls");

                            b1.WithOwner()
                                .HasForeignKey("FlightControlId")
                                .HasConstraintName("fk_flight_controls_flight_controls_id");
                        });

                    b.OwnsOne("Domain.FlightControl.Airport", "Departure", b1 =>
                        {
                            b1.Property<Guid>("FlightControlId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("departure_code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("departure_name");

                            b1.HasKey("FlightControlId");

                            b1.ToTable("flight_controls");

                            b1.WithOwner()
                                .HasForeignKey("FlightControlId")
                                .HasConstraintName("fk_flight_controls_flight_controls_id");
                        });

                    b.OwnsOne("Domain.FlightControl.Plane", "Plane", b1 =>
                        {
                            b1.Property<Guid>("FlightControlId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Capacity")
                                .HasColumnType("integer")
                                .HasColumnName("plane_capacity");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("plane_model");

                            b1.HasKey("FlightControlId");

                            b1.ToTable("flight_controls");

                            b1.WithOwner()
                                .HasForeignKey("FlightControlId")
                                .HasConstraintName("fk_flight_controls_flight_controls_id");
                        });

                    b.Navigation("Arrival")
                        .IsRequired();

                    b.Navigation("Departure")
                        .IsRequired();

                    b.Navigation("Plane")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
